(ns clojure.examples.hello
        (:gen-class))



## To begin we implement all the keywords corresponding to the parks research


(def Parc #{"KAMPA" "Bertramka" "Frantiskanska zahrada" "Obora Hvezda" "Kampa" "Kinsheho Zahrada" "Kalmovka" "Ladronka" "Letna" "Petrin" "Riegrovy sady" "Stromovka" "Vojanovy Sady" "Vysehrad" "bertramka"})
(def Parc2 #{"Petrin" "Riegrovy-sady" "Stromovka" "Vojanovy-Sady" "Vysehrad" "Bertramka" "Frantiskanska-zahrada" "Obora-Hvezda" "Kampa" "Kinsheho-Zahrada" "Kalmovka" "Ladronka" "Letna"})
(def wc #{"wc" "toilet" "privy" "WC" "TOILET" "PRIVY" "Wc" "Toilet" "Privy"})
(def transport #{"transportation" "transport" "tram" "tramway" "metro""bus" "autobus" "Transportation" "Transport" "Tram" "Tramway" "Metro" "Bus" "Autobus" "TRANSPORTATION" "TRANSPORT" "TRAM" "TRAMWAY" "METRO" >(def playground #{"playground" "PLAYGROUND" "Playground"})
(def sport #{"calisthenic" "Calisthenic" "sport" "Sport" "CALISTHENIC" "SPORT"})
(def skate #{"Skate" "skate" "Skating" "SKATING"})
(def bike #{"Bike" "bike" "Biking" "BIKING"})
(def attraction #{"attractions" "Attractions" "entertainment" "Entertainment"})
(def help #{"HELP" "help"})
(def location #{"location" "LOCATION" "position" "POSITION" "place" "PLACE" "locality" "LOCALITY" })
(def parking #{"parking" "car" "Parking" "Car"})
(def étinéraire #{"itinerary" "Itinerary" "Path" "path" "PATH"})


## This definition is intended to be used to finish the program with each wrong answer or when the chatbot doesn't understand something

 (defn restart[]
        (println "Program finish...   Thank's you") (shutdown-agents) ) 

## To begin our program we implemented a "starter", it's aim to start the program with the word "hello"
## We put a read-line for reading the word of the user if the word is hello the program start but if the enter word is wrong the program doesn't start

(let [yayinput (read-line)]
  (if (= yayinput "hello")
    (println "Program starting...")
   ((restart) println " ")))



(println "1st Project of Symbolic Computation, chatbot Bastien")
(println " ")

## Before we lanch the program we need to lanch the "chatbot" so we do the same configuration of before. We put a read-line, To start the chatbot he needs to press "Y" if he doesn't want "N"

(println "Hello, do you whant to start the chatbot Y/N?:  ")
 (let [yayinput (read-line)]
  (if (= yayinput "Y")
    (println "Ok let's start!")
   ((restart) println "wrong")))

## Another readline but for know the name of the user, we did this for the programm be "polite". When the user put this name the chatbot say directly hello <name user>

(println "What's your name ?: ")
(def x (read-line))
(println "Hello"x"!")
(println " ")


(println "###################################################################")

##The chatbot show all parks in prague by a "println" of the definition Parc2 (Parc2 reference all parks in Prague). After this the user need to press ENTER for proceed

(println "Here are all the parks in Prague:")
(println Parc2)
(println "[PRESS ENTER]")
(def r (read-line))

## The chatbot asks if the user want INFORMATIONS or HELP with a read-line name "p" if the user enter INFORMATIONS so p=information the chatbot says "about which Parks"
but if the user says information so "p" is not the same than INFORMATIONS the chatbot will show all commands of this program and put an email for more help needed 

(println "INFORMATIONS or HELP ? ")
(let [p (read-line)]
(if (= p "INFORMATIONS")

## For this ICA we need to work about one park, so we chose the Kampa park. The chatbot ask a park, if with  "contains" the park of the user match with the def "Parc" 
the chatbot will ask what the user wants 

 {  (println "About wich Parc ?: [choose Kampa]")
  (let [z (read-line)]
  (cond
  (contains? Parc z)

{  (println "The" z "park? Ok no problem what do you want to know ?")
  (let [v (read-line)]

## The part of the program is easier and the most important. we put a read-line named "v". With all definition upper we put "if" and "contains" for the chatbot can identify if any keywords of definitions is corresponding with the read-line "v". If any keyword of the read-line 'v' is corresponding so the program print the associated information

    (if  (contains? transport v)
       (println "The kampa park is served by several trams No. 4, 7, 9, 10, 58, 59."))

    (if  (contains? étinéraire v)
       (println "OK, the localisation for "z" is:  Malá Strana, 118 00 Prague 1"))

    (if (contains? skate v)
        (println "Yes you can skating in the Kampa parc"))

    (if (contains? wc v)
        (println "Yes Kampa have"v",you can find them at the entrance"))

    (if (contains? bike v)
        (println "Yes in Kampa park you can biking, in kind it's even better ! "))

   (if (contains? sport v)
        (println "No you can't do"v"in Kampa..."))

   (if (contains? playground v)
        (println "Yes you have a "v"in Kampa..."))

   (if (contains? attraction v)
        (println "Yes you have a beautiful view of the Vltava, Sovovy Mlýny Gallery, Čertovka, Charles Bridge, Werich House, memorial trees.."))

   (if (contains? parking v)
        (println "Yes you a big Parking at the entrance of the Kampa park !"))
)}


 :else (println "Sorry i don't understand your request..."))(restart))}

(println "Some commands to help you with your request:
-Locations (for the geographical position of the park)
-Transport (by what transport is the park served ?)
-Playground (for know if the park have a playground)
-Sport (if the park have a place for do sport)
-Bike (if the park has a cycle path)
-Attractions (if the park have some ententairnment to do)
-Parking (for know if you can park your car)
-Skate
For any questions you can contact help@praguecollege.cz ")))
